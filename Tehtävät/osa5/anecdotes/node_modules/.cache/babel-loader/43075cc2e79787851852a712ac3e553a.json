{"ast":null,"code":"import _objectSpread from \"/Users/Kullervo/Githubailua/Full_Stack-harjoitustyo/Tehta\\u0308va\\u0308t/osa5/anecdotes/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar anecdotesAtStart = ['If it hurts, do it more often', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'];\n\nvar getId = function getId() {\n  return (100000 * Math.random()).toFixed(0);\n};\n\nvar asObject = function asObject(anecdote) {\n  return {\n    content: anecdote,\n    id: getId(),\n    votes: 0\n  };\n};\n\nvar initialState = anecdotesAtStart.map(asObject);\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('state now: ', state);\n  console.log('action', action);\n\n  switch (action.type) {\n    case 'VOTE':\n      var id = action.id;\n      var anecdoteToChange = state.find(function (a) {\n        return a.id === id;\n      });\n\n      var changedAnecdote = _objectSpread({}, anecdoteToChange, {\n        votes: anecdoteToChange.votes + 1\n      });\n\n      return state.map(function (a) {\n        return a.id !== id ? a : changedAnecdote;\n      });\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/Kullervo/Githubailua/Full_Stack-harjoitustyo/Tehtävät/osa5/anecdotes/src/reducer.js"],"names":["anecdotesAtStart","getId","Math","random","toFixed","asObject","anecdote","content","id","votes","initialState","map","reducer","state","action","console","log","type","anecdoteToChange","find","a","changedAnecdote"],"mappings":";AAAA,IAAMA,gBAAgB,GAAG,CACvB,+BADuB,EAEvB,4DAFuB,EAGvB,8LAHuB,EAIvB,iHAJuB,EAKvB,iDALuB,EAMvB,oLANuB,CAAzB;;AASA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,SAAM,CAAC,SAASC,IAAI,CAACC,MAAL,EAAV,EAAyBC,OAAzB,CAAiC,CAAjC,CAAN;AAAA,CAAd;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AAC7B,SAAO;AACLC,IAAAA,OAAO,EAAED,QADJ;AAELE,IAAAA,EAAE,EAAEP,KAAK,EAFJ;AAGLQ,IAAAA,KAAK,EAAE;AAHF,GAAP;AAKD,CAND;;AAQA,IAAMC,YAAY,GAAGV,gBAAgB,CAACW,GAAjB,CAAqBN,QAArB,CAArB;;AAEA,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,MAAL;AACE,UAAMT,EAAE,GAAGM,MAAM,CAACN,EAAlB;AACA,UAAMU,gBAAgB,GAAGL,KAAK,CAACM,IAAN,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACZ,EAAF,KAASA,EAAb;AAAA,OAAZ,CAAzB;;AACA,UAAMa,eAAe,qBAAQH,gBAAR;AAA0BT,QAAAA,KAAK,EAAES,gBAAgB,CAACT,KAAjB,GAAyB;AAA1D,QAArB;;AACA,aAAOI,KAAK,CAACF,GAAN,CAAU,UAAAS,CAAC;AAAA,eAAIA,CAAC,CAACZ,EAAF,KAASA,EAAT,GAAcY,CAAd,GAAkBC,eAAtB;AAAA,OAAX,CAAP;AALJ;;AAQA,SAAOR,KAAP;AACD,CAbD;;AAeA,eAAeD,OAAf","sourcesContent":["const anecdotesAtStart = [\n  'If it hurts, do it more often',\n  'Adding manpower to a late software project makes it later!',\n  'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n  'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n  'Premature optimization is the root of all evil.',\n  'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n]\n\nconst getId = () => (100000 * Math.random()).toFixed(0)\n\nconst asObject = (anecdote) => {\n  return {\n    content: anecdote,\n    id: getId(),\n    votes: 0\n  }\n}\n\nconst initialState = anecdotesAtStart.map(asObject)\n\nconst reducer = (state = initialState, action) => {\n  console.log('state now: ', state)\n  console.log('action', action)\n\n  switch (action.type) {\n    case 'VOTE':\n      const id = action.id\n      const anecdoteToChange = state.find(a => a.id === id)\n      const changedAnecdote = { ...anecdoteToChange, votes: anecdoteToChange.votes + 1 }\n      return state.map(a => a.id !== id ? a : changedAnecdote)\n  }\n\n  return state\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}